"use strict";(self.webpackChunkblog_johnnyreilly_com=self.webpackChunkblog_johnnyreilly_com||[]).push([[20800],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,g=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return n?o.createElement(g,l(l({ref:t},m),{},{components:n})):o.createElement(g,l({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>m});n(67294);var o=n(3905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a.apply(this,arguments)}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={title:"Adding lastmod to sitemap based on git commits",authors:"johnnyreilly",tags:["lastmod","Node.js","simple-git","sitemap","Docusaurus"],image:"./title-image.png",hide_table_of_contents:!1},r=void 0,s={permalink:"/2022/11/25/adding-lastmod-to-sitemap-git-commit-date",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2022-11-25-adding-lastmod-to-sitemap-git-commit-date/index.md",source:"@site/blog/2022-11-25-adding-lastmod-to-sitemap-git-commit-date/index.md",title:"Adding lastmod to sitemap based on git commits",description:"This post demonstrates enriching an XML sitemap with lastmod timestamps based on git commits.",date:"2022-11-25T00:00:00.000Z",formattedDate:"November 25, 2022",tags:[{label:"lastmod",permalink:"/tags/lastmod"},{label:"Node.js",permalink:"/tags/node-js"},{label:"simple-git",permalink:"/tags/simple-git"},{label:"sitemap",permalink:"/tags/sitemap"},{label:"Docusaurus",permalink:"/tags/docusaurus"}],readingTime:3.41,hasTruncateMarker:!1,authors:[{name:"John Reilly",url:"https://twitter.com/johnny_reilly",imageURL:"https://blog.johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{title:"Adding lastmod to sitemap based on git commits",authors:"johnnyreilly",tags:["lastmod","Node.js","simple-git","sitemap","Docusaurus"],image:"./title-image.png",hide_table_of_contents:!1},prevItem:{title:"Docusaurus: Using fontaine to reduce custom font cumulative layout shift",permalink:"/2022/12/01/docusaurus-using-fontaine-to-reduce-custom-font-cumulative-layout-shift"},nextItem:{title:"XML: read and write with Node.js",permalink:"/2022/11/22/xml-read-and-write-with-node-js"}},p={image:n(91317).Z,authorsImageUrls:[void 0]},m=[{value:"Reading git log in Node.js",id:"reading-git-log-in-nodejs",level:2},{value:"From sitemap to git log",id:"from-sitemap-to-git-log",level:2},{value:"GitHub Actions - <code>fetch_depth</code>",id:"github-actions---fetch_depth",level:2}],c={toc:m};function d(e){var{components:t}=e,l=i(e,["components"]);return(0,o.kt)("wrapper",a({},c,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This post demonstrates enriching an XML sitemap with ",(0,o.kt)("inlineCode",{parentName:"p"},"lastmod")," timestamps based on git commits."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"title image reading &quot;Adding lastmod to sitemap based on git commits&quot; with XML and Docusaurus logos",src:n(91317).Z,width:"800",height:"450"})),(0,o.kt)("h2",a({},{id:"reading-git-log-in-nodejs"}),"Reading git log in Node.js"),(0,o.kt)("p",null,(0,o.kt)("a",a({parentName:"p"},{href:"/2022/11/22/xml-read-and-write-with-node-js"}),"In the last post I showed how to manipulate XML in Node.js, and filter our sitemap"),". In this post we'll build upon what we did last time, read the git log in Node.js and use that to power a ",(0,o.kt)("inlineCode",{parentName:"p"},"lastmod")," property."),(0,o.kt)("p",null,"To read the git log in Node.js we'll use the ",(0,o.kt)("a",a({parentName:"p"},{href:"https://www.npmjs.com/package/simple-git"}),"simple-git")," package. It's a great package that makes it easy to read the git log. Other stuff too - but that's what we care about today."),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-shell"}),"yarn add simple-git\n")),(0,o.kt)("p",null,"To work with ",(0,o.kt)("inlineCode",{parentName:"p"},"simple-git")," we need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Git")," instance. We can do that like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-ts"}),"import { simpleGit, SimpleGit, SimpleGitOptions } from 'simple-git';\n\nfunction getSimpleGit(): SimpleGit {\n  const baseDir = path.resolve(process.cwd(), '..');\n\n  const options: Partial<SimpleGitOptions> = {\n    baseDir,\n    binary: 'git',\n    maxConcurrentProcesses: 6,\n    trimmed: false,\n  };\n\n  const git = simpleGit(options);\n\n  return git;\n}\n")),(0,o.kt)("h2",a({},{id:"from-sitemap-to-git-log"}),"From sitemap to git log"),(0,o.kt)("p",null,"It's worth pausing to consider what our sitemap looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:news="http://www.google.com/schemas/sitemap-news/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">\n  <url>\n    <loc>https://blog.johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n  <url>\n    <loc>https://blog.johnnyreilly.com/2022/09/20/react-usesearchparamsstate</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n  \x3c!-- ... --\x3e\n</urlset>\n')),(0,o.kt)("p",null,"If you look at the URL (",(0,o.kt)("inlineCode",{parentName:"p"},"loc"),") you can see that it's fairly easy to determine the path to the original markdown file. If we take ",(0,o.kt)("a",a({parentName:"p"},{href:"https://blog.johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants"}),"https://blog.johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants"),", we can see that the path to the markdown file is ",(0,o.kt)("inlineCode",{parentName:"p"},"blog-website/blog/2012-01-07-standing-on-shoulders-of-giants/index.md"),"."),(0,o.kt)("p",null,"As long as we don't have a custom slug in play (and I rarely do), we have a reliable way to get from blog post URL (",(0,o.kt)("inlineCode",{parentName:"p"},"loc"),") to markdown file. With that we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"simple-git")," to get the git log for that file. We can then use that to populate the ",(0,o.kt)("inlineCode",{parentName:"p"},"lastmod")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-ts"}),"const dateBlogUrlRegEx = /(\\d\\d\\d\\d\\/\\d\\d\\/\\d\\d)\\/(.+)/;\n\nasync function enrichUrlsWithLastmod(\n  filteredUrls: SitemapUrl[]\n): Promise<SitemapUrl[]> {\n  const git = getSimpleGit();\n\n  const urls: SitemapUrl[] = [];\n  for (const url of filteredUrls) {\n    if (urls.includes(url)) {\n      continue;\n    }\n\n    try {\n      // example url.loc: https://blog.johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants\n      const pathWithoutRootUrl = url.loc.replace(rootUrl + '/', ''); // eg 2012/01/07/standing-on-shoulders-of-giants\n\n      const match = pathWithoutRootUrl.match(dateBlogUrlRegEx);\n\n      if (!match || !match[1] || !match[2]) {\n        urls.push(url);\n        continue;\n      }\n\n      const date = match[1].replaceAll('/', '-'); // eg 2012-01-07\n      const slug = match[2]; // eg standing-on-shoulders-of-giants\n\n      const file = `blog-website/blog/${date}-${slug}/index.md`;\n      const log = await git.log({\n        file,\n      });\n\n      const lastmod = log.latest?.date.substring(0, 10);\n      urls.push(lastmod ? { ...url, lastmod } : url);\n      console.log(url.loc, lastmod);\n    } catch (e) {\n      console.log('file date not looked up', url.loc, e);\n      urls.push(url);\n    }\n  }\n  return urls;\n}\n")),(0,o.kt)("p",null,"Above we're using a regular expression to extract the date and slug from the URL. We then use those to construct the path to the markdown file. We then use ",(0,o.kt)("inlineCode",{parentName:"p"},"simple-git")," to get the git log for that file. We then use the latest commit date to populate the ",(0,o.kt)("inlineCode",{parentName:"p"},"lastmod")," property, and push that onto the ",(0,o.kt)("inlineCode",{parentName:"p"},"urls")," array."),(0,o.kt)("p",null,"Finally we return the ",(0,o.kt)("inlineCode",{parentName:"p"},"urls")," array and write that to the sitemap before we write it out:"),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-ts"}),"sitemap.urlset.url = await enrichUrlsWithLastmod(filteredUrls);\n")),(0,o.kt)("p",null,"Our new sitemap looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:news="http://www.google.com/schemas/sitemap-news/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">\n  <url>\n    <loc>https://blog.johnnyreilly.com/2012/01/07/standing-on-shoulders-of-giants</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n    <lastmod>2021-12-19</lastmod>\n  </url>\n  <url>\n    <loc>https://blog.johnnyreilly.com/2012/01/14/jqgrid-its-just-far-better-grid</loc>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n    <lastmod>2022-11-03</lastmod>\n  </url>\n  \x3c!-- ... --\x3e\n</urlset>\n')),(0,o.kt)("p",null,"You see the ",(0,o.kt)("inlineCode",{parentName:"p"},"lastmod")," property has been populated for URLs based upon the most recent commit for that file. Yay!"),(0,o.kt)("h2",a({},{id:"github-actions---fetch_depth"}),"GitHub Actions - ",(0,o.kt)("inlineCode",{parentName:"h2"},"fetch_depth")),(0,o.kt)("p",null,"You might think we were done (I thought we were done), but we're not. We're not done because we're using GitHub Actions to build the site."),(0,o.kt)("p",null,"When I tested this locally, it worked fine. However, when I pushed it to GitHub Actions, it surfaced a ",(0,o.kt)("inlineCode",{parentName:"p"},"latest.date")," which wasn't populated with the value you'd hope. The reason was that the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch_depth")," was set to 1 (the default). This meant that the git log wasn't providing the information we'd hope for. By changing the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch_depth")," to 0 the situation is resolved."),(0,o.kt)("pre",null,(0,o.kt)("code",a({parentName:"pre"},{className:"language-yaml"}),"- uses: actions/checkout@v3\n  with:\n    # Number of commits to fetch. 0 indicates all history for all branches and tags.\n    # Default: 1\n    fetch-depth: 0\n")))}d.isMDXComponent=!0},91317:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/title-image-83e5a8ec1684626cf7373c7c6c529fe4.png"}}]);